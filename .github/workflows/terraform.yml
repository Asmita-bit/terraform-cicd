name: Terraform CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lint-security:
    name: Lint & Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [dev, prod]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      - name: Install TFLint
        run: |
          curl -sLo tflint.zip https://github.com/terraform-linters/tflint/releases/download/v0.46.1/tflint_linux_amd64.zip
          unzip tflint.zip -d /usr/local/bin/
          tflint --version

      - name: Install tfsec
        run: |
          curl -sLo tfsec https://github.com/aquasecurity/tfsec/releases/download/v1.28.1/tfsec-linux-amd64
          chmod +x tfsec
          mv tfsec /usr/local/bin/

      - name: Terraform Init
        run: terraform init
        working-directory: terraform-project/environments/${{ matrix.env }}

      - name: Terraform Fmt
        run: terraform fmt -check -recursive

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform-project/environments/${{ matrix.env }}

      - name: TFLint
        run: tflint

      - name: tfsec
        run: tfsec terraform-project/environments/${{ matrix.env }}

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: lint-security
    strategy:
      matrix:
        env: [dev, prod]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      - name: Terraform Init
        run: terraform init
        working-directory: terraform-project/environments/${{ matrix.env }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan
          terraform show -no-color tfplan > plan.txt
        working-directory: terraform-project/environments/${{ matrix.env }}

      - name: Comment Plan in PR
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ## Terraform Plan Output for `${{ matrix.env }}`
            ```
            ${{ steps.plan.outputs.stdout || 'See plan.txt' }}
            ```

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-${{ matrix.env }}
          path: terraform-project/environments/${{ matrix.env }}/tfplan

  release:
    name: Build and Release Artifact
    runs-on: ubuntu-latest
    needs: plan
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4

      - name: Zip Terraform Directory
        run: zip -r terraform-artifact.zip terraform-project

      - name: Generate Tag
        id: tag
        run: |
          TAG="v1.0.$(date +%s)"
          echo "::set-output name=tag::$TAG"

      - name: Create GitHub Tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.tag.outputs.tag }}

      - name: Create GitHub Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: ${{ steps.tag.outputs.tag }}
          files: terraform-artifact.zip

      - name: Comment Release Tag
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            Terraform Artifact Released: `${{ steps.tag.outputs.tag }}`

  deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        env: [dev, prod]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      - name: Terraform Init
        run: terraform init
        working-directory: terraform-project/environments/${{ matrix.env }}

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: terraform-project/environments/${{ matrix.env }}
