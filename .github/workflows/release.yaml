name: Terraform CI/CD
on:

  push:
    branches: [main]
jobs:

  tag_and_release:
      permissions:
        pull-requests: write
        contents: write
      runs-on: ubuntu-latest
      strategy:
        matrix:
          env: ["ec2-project", "s3-project"]
      outputs:
        release_tag: ${{ steps.tag_push.outputs.release_tag }}

      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Install semver CLI
          run: |
            curl -sL https://raw.githubusercontent.com/fsaintjacques/semver-tool/master/src/semver -o semver
            chmod +x semver
            sudo mv semver /usr/local/bin/

        - name: Get latest tag
          id: get_tag
          run: |
            latest_tag=$(git tag --list "${{ matrix.env }}@v*" --sort=-creatordate | head -n 1)
            if [ -z "$latest_tag" ]; then
              latest_tag="${{ matrix.env }}@v0.0.0"
            fi
            echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

        - name: Determine bump type
          id: bump_type
          run: |
            latest_tag=$(git tag --list "${{ matrix.env }}@v*" --sort=-creatordate | head -n 1)
            if [ -z "$latest_tag" ]; then
              commits=$(git log --oneline)
            else
              commits=$(git log "$latest_tag"..HEAD --oneline)
            fi
            bump="patch"
            if echo "$commits" | grep -Eq "BREAKING CHANGE|!:"; then
              bump="major"
            elif echo "$commits" | grep -Eiq "^feat"; then
              bump="minor"
            fi
            echo "bump=$bump" >> $GITHUB_OUTPUT

        - name: Calculate New Version
          id: new_version
          run: |
            current=${{ steps.get_tag.outputs.latest_tag }}
            current=${current#${{ matrix.env }}@v}
            bumped=$(semver bump ${{ steps.bump_type.outputs.bump }} $current)
            if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
              new_version="${bumped}-dev"
            else
              new_version="${bumped}"
            fi
            echo "new_version=$new_version" >> $GITHUB_OUTPUT

        - name: Create git tag and push
          id: tag_push
          run: |
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            new_tag="${{ matrix.env }}@v${{ steps.new_version.outputs.new_version }}"

            if git rev-parse "$new_tag" >/dev/null 2>&1 || git ls-remote --tags origin | grep -q "refs/tags/$new_tag$"; then
              echo "Tag $new_tag already exists. Skipping tagging."
            else
              git tag -a "$new_tag" -m "chore: release $new_tag"
              git push origin "$new_tag"
            fi
            echo "release_tag=$new_tag" >> $GITHUB_OUTPUT

            - name: Build artifact zip
            run: |
                TAG=${{ steps.tag_push.outputs.release_tag }}
                mkdir -p artifact-content
                cp -r ${{ matrix.env }} artifact-content${{ matrix.env }}
                cp -r ${{ matrix.env }} artifact-content${{ matrix.env }}
                cd artifact-content
                zip -r ../build-artifacts-${TAG}.zip ./*

        - name: Create GitHub Release and upload artifact
          uses: marvinpinto/action-automatic-releases@latest
          with:
            repo_token: ${{ secrets.TOKEN_GITHUB }}
            automatic_release_tag: ${{ steps.tag_push.outputs.release_tag }}
            files: build-artifacts-${{ steps.tag_push.outputs.release_tag }}.zip

        - name: Upload build artifact
          uses: actions/upload-artifact@v4
          with:
            name: ${{ matrix.env }}-build-artifact-${{ steps.tag_push.outputs.release_tag }}
            path: build-artifacts-${{ steps.tag_push.outputs.release_tag }}.zip

